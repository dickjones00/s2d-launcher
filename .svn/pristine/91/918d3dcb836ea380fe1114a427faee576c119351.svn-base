using System;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Drawing;
using System.Media;
using System.Net;
using System.Reflection;
using System.Windows.Forms;


namespace Launcher
{
    public partial class fmLauncher : Form
    {
        public fmLauncher()
        {
            InitializeComponent();
            Icon myIcon = new Icon("Resources/launcher.ico");
            SetInitialValues(); // postavlja definirane vrijednosti stupaca u grdLaunch
        }

        void SetInitialValues()
        {
            // Set DataGridView read only property to true
            // User will not be able to enter values to grid directly
            grdLaunch.ReadOnly = true;
            grdLaunch.AllowUserToDeleteRows = false;
            // Set DataGridView number of rows to one , this is
            // necessary
            //grdLaunch.RowCount = 1;
            // broj stupaca i imena
            grdLaunch.ColumnCount = 8;
            grdLaunch.Columns[0].Name = "Ime";
            grdLaunch.Columns[0].Width = 85;
            grdLaunch.Columns[1].Name = "S2D_DQM";
            grdLaunch.Columns[1].Width = 65;
            grdLaunch.Columns[2].Name = "URL";
            grdLaunch.Columns[2].Width = 200;
            grdLaunch.Columns[3].Name = "Username";
            grdLaunch.Columns[3].Width = 65;
            grdLaunch.Columns[4].Name = "Password(Encrypted)";
            grdLaunch.Columns[4].Width = 65;
            grdLaunch.Columns[5].Name = "Action";
            grdLaunch.Columns[5].Width = 65;
            grdLaunch.Columns[6].Name = "Session";
            grdLaunch.Columns[6].Width = 65;
            grdLaunch.Columns[7].Name = "Debug";
            grdLaunch.Columns[7].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            DataGridViewButtonColumn btn = new DataGridViewButtonColumn();
            grdLaunch.Columns.Add(btn);
            btn.HeaderText = "Run";
            btn.Text = "Pokreni";
            btn.Name = "btn";
            btn.UseColumnTextForButtonValue = true;

            grdLaunch.Sort(grdLaunch.Columns[1], ListSortDirection.Descending);
            grdLaunch.Refresh();
        }

        private void btnAddListEntry_Click(object sender, EventArgs e)
        {
            string semiColon = "";
            if (txtPort.Text != "") //ako nije upisan PORT onda nema dvotočke
            {
                semiColon = ":";
            }

            string devAction = "-";
            string devSession = "-";
            string devDebug = "-";
            string url = txtHttp.Text + txtUrl.Text + semiColon + txtPort.Text;
            if (chkAction.Checked)
            {
                if (txtAction.Text == "")
                {
                    MessageBox.Show("Ako je izabrana opcija 'Action', polje opcije ne smije biti prazno!");
                    goto DoNothingAction;
                }
                else
                {
                    devAction = txtAction.Text;
                }
            }

            if (chkSession.Checked)
            {
                if (txtSession.Text == "")
                {
                    MessageBox.Show("Ako je izabrana opcija 'Session', polje opcije ne smije biti prazno!");
                    goto DoNothingSession;
                }
                else
                {
                    devSession = txtSession.Text;
                }
            }

            if (chkDebug.Checked)
            {
                if (txtDebug.Text == "")
                {
                    MessageBox.Show("Ako je izabrana opcija 'Debug', polje opcije ne smije biti prazno!");
                    goto DoNothingDebug;
                }
                else
                {
                    devDebug = txtDebug.Text;
                }

            }
            //string devParameters = devAction + devSession + devDebug;
            //string parameters = cboApps.Text + ".exe" + " -endpoint " + url + " -user " + txtUsername.Text + " -pass " + txtPassword.Text + devParameters;

            // nm: inace, string moze biti i null pa se to provjerava ovako: if (!string.IsNullOrEmpty(txtName.Text)) - ali u TextBox kontroli nikad nece biti null pa je ovo tvoje ok
            if (txtName.Text != "" && cboApps.Text != "" && txtHttp.Text != "" && txtUsername.Text != "" && txtPassword.Text != "")
            {
                grdLaunch.Rows.Add(txtName.Text, cboApps.Text, url, txtUsername.Text, EncryptionHelper.Encrypt(txtPassword.Text), devAction, devSession, devDebug);
            }
            else
            {
                MessageBox.Show("Svi obavezni podaci (ime, endpoint(URL), username, password) moraju biti uneseni!",
                "Greška", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            grdLaunch.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
            grdLaunch.Sort(grdLaunch.Columns[1], ListSortDirection.Ascending);
            SaveList.saveGridviewToAppconfig(grdLaunch);
        DoNothingAction: ;
        DoNothingSession: ;
        DoNothingDebug: ;
        }

        private void btnDeleteListEntry_Click(object sender, EventArgs e)
        {
            try
            {
                grdLaunch.Rows.RemoveAt(grdLaunch.CurrentCell.RowIndex);
                SaveList.saveGridviewToAppconfig(grdLaunch);
            }
            catch (Exception) //hvata grešku kod pokusava brisanja (zadnjeg (default)) praznog reda u tablici
            {
                MessageBox.Show("Odabrani red se ne može obrisati!", "Upozorenje!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void fmLauncher_Load(object sender, EventArgs e)
        {
            cboApps.SelectedIndex = 0; // 0 = S2D - default izabrana vrijednost sa popisa

            string s = null;
            s = Assembly.GetExecutingAssembly().GetName().Version.ToString();
            this.Text = "S2D/DQM Launcher v" + s; //broj verzije u title bar
            //treba dovrsiti stavljanje verzije(revizije) u title bar
            // For read access you do not need to call the OpenExeConfiguraton
            // čitanje key-eva i value-a iz app.configa
            try
            {
                foreach (string key in ConfigurationManager.AppSettings)
                {
                    string value = ConfigurationManager.AppSettings[key];
                    string[] words = value.Split(',');
                    grdLaunch.Rows.Add(words);
                }
            }
            catch (Exception readSettings) // nm: Exception se obicno naziva "e" ili "ex" 
            //(znam da smo pricali da se to ne smije, ali postoje situacije 
            //gdje su kratki nazivi ipak pozeljni - kada se koriste u 
            //ogranicenom kratkom segmentu koda)
            {
                MessageBox.Show(readSettings.Message);
            }
            grdLaunch.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
        }

        private void grdLaunch_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            //stavlja * umjesto znakova u password kolumni

            if (grdLaunch.Columns[e.ColumnIndex].Name == "Password(Encrypted)" && e.Value != null)
            {
                grdLaunch.Rows[e.RowIndex].Tag = e.Value;
                e.Value = new String('*', e.Value.ToString().Length); //broj zvjezdica odgovara broju znakova encrypted passworda
            }
        }
        private void grdLaunch_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (grdLaunch.CurrentRow.Tag != null)
                e.Control.Text = grdLaunch.CurrentRow.Tag.ToString();
        }

        private void txtPort_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar)// samo brojevi u PORT polje
                && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
                MessageBox.Show("Dopušteni su samo brojevi!");
            }
        }

        public bool IsAddressValid(string addrString) // nm: dobra fora :))
        {
            IPAddress address;
            return IPAddress.TryParse(addrString, out address); // provjerava ispravnost upisane IP adrese
        }

        private void txtUrl_Leave(object sender, EventArgs e)
        {
            if (IsAddressValid(txtUrl.Text) == false)
            {
                MessageBox.Show("Provjerite ispravnost IP adrese!", "Obavijest!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void fmLauncher_FormClosing(object sender, FormClosingEventArgs e)
        {
            #region radi snimanje u XML ali ne treba
            //DataTable table = new DataTable("LauncherCommandLineInfo");
            //// copy the correct structure from datagridview to the table
            //foreach (DataGridViewColumn column in grdLaunch.Columns)
            //{
            //    table.Columns.Add(column.Name, typeof(string)); //ako je prazno ime onda se rushi
            //}

            //// populate the datatable from datagridview
            //for (int rowIndex = 0; rowIndex < grdLaunch.Rows.Count; rowIndex++)
            //{
            //    DataRow newRow = table.Rows.Add();
            //    for (int columnIndex = 0; columnIndex < grdLaunch.Columns.Count; columnIndex++)
            //    {
            //        try
            //        {
            //            newRow[columnIndex] = grdLaunch.Rows[rowIndex].Cells[columnIndex].Value;
            //        }
            //        catch (Exception ex)
            //        {
            //            MessageBox.Show(ex.Message);
            //        }
            //    }
            //}
            //DataSet ds = new DataSet();
            //ds.Tables.Add(table);
            //ds.WriteXml("Launcher.Config.xml", System.Data.XmlWriteMode.IgnoreSchema);
            #endregion

            SaveList.saveGridviewToAppconfig(grdLaunch);
        }

        private void btnTest_Click(object sender, EventArgs e)
        {
            try
            {
                string dec = EncryptionHelper.Decrypt(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[4].Value.ToString());
                MessageBox.Show(dec);
            }
            catch (Exception)
            {
                MessageBox.Show("Polje 'Password' u odabranom redu je prazno!", "Obavijest", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            try
            {
                SoundPlayer sndplayr = new
                         SoundPlayer(Launcher.Properties.Resources.cow_madcow);
                sndplayr.Play();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + ": " + ex.StackTrace.ToString(),
                               "Error");
            }
        }

        private void grdLaunch_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                string devAction = "";
                string devSession = "";
                string devDebug = "";
                if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[5].Value.ToString() != "-")
                {
                    devAction = " -action " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[5].Value.ToString();
                }
                if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[6].Value.ToString() != "-")
                {
                    devSession = " -session " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[6].Value.ToString();
                }
                if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString() != "-")
                {
                    devDebug = " -debug " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString();
                }
                if (e.ColumnIndex == 8) // pokrece se s2d_vs.exe sa parametrima
                {
                    string devParams = devAction + devSession + devDebug;
                    string decryptedPassword = EncryptionHelper.Decrypt(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[4].Value.ToString());
                    ProcessStartInfo startInfo = new ProcessStartInfo();
                    startInfo.FileName = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[1].Value.ToString() + ".exe";
                    startInfo.Arguments = " -endpoint " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[2].Value.ToString()
                                        + " -user " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString()
                                        + " -pass " + decryptedPassword
                                        + devParams;
                    Process.Start(startInfo);
                    //MessageBox.Show(startInfo.FileName.ToString() + startInfo.Arguments.ToString());
                }
            }
            catch (Exception ex)
            {
                //if (string.IsNullOrEmpty(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString()))
                //{
                //    MessageBox.Show(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString());
                //   goto zadnjiPrazanRed;
                //}
                //else
                //{
                MessageBox.Show("Greška pri pokretanju aplikacije:" + "\n\n" + ex.Message.ToString(), "Greška", MessageBoxButtons.OK, MessageBoxIcon.Error);

                //}
                //zadnjiPrazanRed: ;
            }
        }
    }
}