using System;
using System.Configuration;
using System.Diagnostics;
using System.Net;
using System.Reflection;
using System.Windows.Forms;
using Launcher.Models;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq;

namespace Launcher
{
    public partial class fmLauncher : Form
    {
        public fmLauncher()
        {
            InitializeComponent();
            SetInitialValues(); // postavlja definirane vrijednosti stupaca u grdLaunch
            this.Icon = Launcher.Properties.Resources.launch;
        }

        public void fmLauncher_Load(object sender, EventArgs e)
        {
            cboApps.SelectedIndex = 0; // 0 = S2D - default izabrana vrijednost sa popisa
                        
            //ubacivanje liste u datagridview iz SvcSettings klase
            List<SvcSettings> list = SvcSettings.GetSettingsFromConfig();
            this.grdLaunch.DataSource = list;
            this.ActiveControl = cboApps;
            grdLaunch.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
        }

        void SetInitialValues()
        {
            grdLaunch.Columns[0].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            DataGridViewButtonColumn btn = new DataGridViewButtonColumn();
            grdLaunch.Columns.Add(btn);
            btn.HeaderText = "Pokreni";
            btn.Text = "Pokreni";
            btn.Name = "btn";
            btn.UseColumnTextForButtonValue = true;
            btn.MinimumWidth = 60;
        }

        private void btnAddListEntry_Click(object sender, EventArgs e)
        {

            string devAction = "-";
            string devSession = "-";
            //string url = txtHttp.Text + txtUrl.Text + semiColon + txtPort.Text;
            #region CheckboxNames
            bool debug = false;
            if (chkAction.Checked)
            {
                if (txtAction.Text == "")
                {
                    MessageBox.Show("Ako je izabrana developer opcija 'action', polje za unos opcije ne smije biti prazno!");
                    goto DoNothingAction;
                }
                else
                {
                    devAction = txtAction.Text;
                }
            }

            if (chkSession.Checked)
            {
                if (txtSession.Text == "")
                {
                    MessageBox.Show("Ako je izabrana developer opcija 'session', polje za unos opcije ne smije biti prazno!");
                    goto DoNothingSession;
                }
                else
                {
                    devSession = txtSession.Text;
                }
            }

            if (chkDebug.Checked)
            {
                debug = true;
            }
            #endregion

            // nm: inace, string moze biti i null pa se to provjerava ovako: if (!string.IsNullOrEmpty(txtName.Text)) - ali u TextBox kontroli nikad nece biti null pa je ovo tvoje ok
            if (txtName.Text != "" && cboApps.Text != "" && txtHttp.Text != "" && txtUsername.Text != "" && txtPassword.Text != "")
            {

                var section = ConfigurationManager.GetSection("appSettings") as NameValueCollection;
                var value = section[txtName.Text + "(" + cboApps.Text.Substring(0, 3) + ")"];
                string[] words = { "|", "|" }; // bezveze string
                if (value != null)
                {
                    words = value.Split('|');
                }

                //usporedjuje ime iz app configa key-a i ime uneseno u txtName
                if (StringComparer.CurrentCultureIgnoreCase.Equals(words[0], txtName.Text) == true
                    && StringComparer.CurrentCultureIgnoreCase.Equals(words[1], cboApps.Text) == true) // case insensitive comparing
                {
                    MessageBox.Show("Unos s istim imenom već postoji!\n\nUnesite novo ime.", "Upozorenje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    this.ActiveControl = txtName; //prebacuje focus na txtName
                }
                else
                {
                    AppName.appNameCombo = txtName.Text + "(" + cboApps.Text.Substring(0, 3) + ")";
                    SaveList.addDataToAppconfig(txtName.Text + "|"
                                               + cboApps.Text + "|"
                                               + txtHttp.Text + txtUrl.Text + "|"
                                               + txtPort.Text + "|"
                                               + txtUsername.Text + "|"
                                               + txtPassword.Text + "|"
                                               + debug.ToString() + "|"
                                               + devAction + "|"
                                               + devSession);
                    List<SvcSettings> list = SvcSettings.GetSettingsFromConfig();
                    this.grdLaunch.DataSource = list;

                }
            }
            else
            {
                MessageBox.Show("Svi obavezni podaci (ime, endpoint(URL), username, password) moraju biti uneseni!", "Greška", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            grdLaunch.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
        //grdLaunch.Columns[0].SortMode = DataGridViewColumnSortMode.Automatic;
        DoNothingAction: ;
        DoNothingSession: ;

        }

        public class AppName // pozivanje txt controli u druge clase npr. fmLauncher.AppName.appNameCombo
        // pa ovdje dodati po potrebi variable i dodati im vrijednost
        {
            public static string appNameCombo = string.Empty;

        }
        private void btnDeleteListEntry_Click(object sender, EventArgs e)
        {
            string deleteEntry = "";
            if (grdLaunch.RowCount > 0)
            {
                deleteEntry = txtName.Text + "(" + cboApps.Text.Substring(0, 3) + ")";
                var delEntryFromConfig = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
                delEntryFromConfig.AppSettings.Settings.Remove(deleteEntry);
                delEntryFromConfig.Save(ConfigurationSaveMode.Modified);
                ConfigurationManager.RefreshSection("appSettings"); // nakon brisanja refresh appSettings sekciju pa se i gridview refresha
                grdLaunch.Refresh();
                List<SvcSettings> list = SvcSettings.GetSettingsFromConfig();
                this.grdLaunch.DataSource = list;
            }
        }

        private void txtPort_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar)// samo brojevi u PORT polje
                && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
                MessageBox.Show("Dopušteni su samo brojevi!");
            }
        }

        public bool IsAddressValid(string addrString) // nm: dobra fora :))
        {
            IPAddress address;
            return IPAddress.TryParse(addrString, out address); // provjerava ispravnost upisane IP adrese
        }

        private void txtUrl_Leave(object sender, EventArgs e)
        {
            if (IsAddressValid(txtUrl.Text) == false)
            {
                MessageBox.Show("Provjerite ispravnost IP adrese!", "Obavijest!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void grdLaunch_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                txtName.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[0].Value.ToString();
                cboApps.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[1].Value.ToString();
                System.Uri uri = new Uri(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[2].Value.ToString());
                string uriWithoutScheme = uri.Host + uri.PathAndQuery;
                uriWithoutScheme = uriWithoutScheme.TrimEnd('/');
                txtUrl.Text = uriWithoutScheme;
                txtPort.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString();
                txtUsername.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[4].Value.ToString();
                txtPassword.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[5].Value.ToString();
                Boolean i = bool.Parse(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[6].Value.ToString());
                if (i == true)
                {
                    chkDebug.Checked = true;
                }
                else
                {
                    chkDebug.Checked = false;
                }
                if (e.ColumnIndex == grdLaunch.ColumnCount - 1) // pokrece se s2d_v2.exe sa parametrima
                {
                    string semiColon = "";
                    string opcAktion = "";
                    string opcSession = "";
                    string opcDebug = "";
                    if (i == true)
                    {
                        opcDebug = " -debug true ";
                    }
                    if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString() != "")
                    {
                        semiColon = ":";
                    }
                    if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString() != "-")
                    {
                        opcAktion = " -action " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString();
                    }
                    if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[8].Value.ToString() != "-")
                    {
                        opcSession = " -session " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[8].Value.ToString();
                    }
                    string urlFull = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[2].Value.ToString() + semiColon + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString();
                    ProcessStartInfo startInfo = new ProcessStartInfo();
                    startInfo.FileName = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[1].Value.ToString() + ".exe";
                    startInfo.Arguments = " -endpoint " + urlFull
                                        + " -user " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[4].Value.ToString()
                                        + " -pass " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[5].Value.ToString()
                                        + opcDebug + opcAktion + opcSession;
                    Process.Start(startInfo);
                    //MessageBox.Show(startInfo.FileName.ToString() + startInfo.Arguments.ToString());
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Greška pri pokretanju aplikacije:" + "\n\n" + ex.Message.ToString(), "Greška", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
        }

        private void txtName_KeyDown(object sender, KeyEventArgs e)
        {
            Keys key = e.KeyCode;
            if (key == Keys.Space)
            {
                e.Handled = true;
            }

            base.OnKeyDown(e);

        }

        private void txtName_Leave(object sender, EventArgs e)
        {
            if (txtName.Text.Contains(" "))
            {
                MessageBox.Show("Ime ne smije sadržavati prazna mjesta (koristite underscore '_').");
                this.ActiveControl = txtName;
                String sel = txtName.SelectedText;
                //txtName.Focus();
            }
        }

        private void chkAction_CheckedChanged(object sender, EventArgs e)
        {
            if (chkAction.Checked == true)
            {
                txtAction.ReadOnly = false;
            }
            else
            {
                txtAction.ReadOnly = true;
            }
        }

        private void chkSession_CheckedChanged(object sender, EventArgs e)
        {
            if (chkSession.Checked == true)
            {
                txtSession.ReadOnly = false;
            }
            else
            {
                txtSession.ReadOnly = true;
            }
        }

        private void btnCsvExport_Click(object sender, EventArgs e)
        {
            // Displays a SaveFileDialog so the user can save the Image
            // assigned to button.
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "CSV format|*.csv";
            saveFileDialog1.Title = "Save CSV File";
            saveFileDialog1.FileName = "S2D Export";
            saveFileDialog1.DefaultExt = "csv";
            saveFileDialog1.ShowDialog();

            if (saveFileDialog1.FileName != "")
            {
                WriteCsv.writeCSV(grdLaunch, saveFileDialog1.FileName);
            }

        }

        private void txtName_TextChanged(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in grdLaunch.Rows) // SearchAsYouType tekstom iz txtName
            {
                // Test if the first column of the current row equals
                // the value in the text box
                if (StringComparer.CurrentCultureIgnoreCase.Equals((string)row.Cells[0].Value, txtName.Text) == true)
                {
                    // we have a match
                    row.Selected = true;
                }
                else
                {
                    row.Selected = false;
                }
            }
        }

    }
}

