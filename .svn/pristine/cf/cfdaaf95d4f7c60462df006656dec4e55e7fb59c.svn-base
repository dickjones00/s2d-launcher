using System;
using System.Configuration;
using System.Diagnostics;
using System.Net;
using System.Reflection;
using System.Windows.Forms;
using Launcher.Models;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Xml;
using System.IO;
using System.Text;
using System.Drawing;
using Launcher.Properties;

namespace Launcher
{
    public partial class fmLauncher : Form
    {
        public fmLauncher()
        {
            InitializeComponent();

            this.Icon = Launcher.Properties.Resources.launch;
        }

        public static string startCellValue = "";
        
        public static string startCellValueName = "";
        
        public void fmLauncher_Load(object sender, EventArgs e)
        {
            if (!File.Exists("Launcher.exe.config"))
            {
                System.Text.StringBuilder sb = new StringBuilder();

                sb.AppendLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
                sb.AppendLine("<configuration>");
                sb.AppendLine("<configSections>");
                sb.AppendLine("</configSections>");
                sb.AppendLine("<appSettings>");
                sb.AppendLine("</appSettings>");
                sb.AppendLine("<chkbxSettings>");
                sb.AppendLine("<add key=\"optCloseOnOpen\" value=\"false\"/>");
                sb.AppendLine("</chkbxSettings>");
                sb.AppendLine("<startup>");
                sb.AppendLine("<supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.0\"/>");
                sb.AppendLine("</startup>");
                sb.AppendLine("</configuration>");

                string loc = Assembly.GetEntryAssembly().Location;
                System.IO.File.WriteAllText(String.Concat(loc, ".config"), sb.ToString());
            }
            cboApps.SelectedIndex = 0; // 0 = S2D - default izabrana vrijednost sa popisa

            //ubacivanje liste u datagridview iz SvcSettings klase
            BindingList<SvcSettings> list = SvcSettings.GetSettingsFromConfig();
            this.grdLaunch.DataSource = list;
            this.ActiveControl = cboApps;

            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);
            foreach (XmlElement xElement in XmlDoc.DocumentElement)
            {
                if (xElement.Name == "chkbxSettings")
                {
                    foreach (XmlNode xNode in xElement.ChildNodes)
                    {
                        if (xNode.Attributes[0].Value == "optCloseOnOpen")
                        {
                            chkCloseOption.Checked = Convert.ToBoolean(xNode.Attributes[1].Value);
                        }
                    }
                }
            }

            DataGridViewButtonColumn btn = new DataGridViewButtonColumn();
            grdLaunch.Columns.Add(btn);
            btn.HeaderText = "Pokreni";
            btn.Text = "Pokreni";
            btn.Name = "btn";
            btn.UseColumnTextForButtonValue = true;
            btn.MinimumWidth = 60;
            grdLaunch.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
            grdLaunch.Columns[0].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            //MessageBox.Show(result);
        }

        private void btnAddListEntry_Click(object sender, EventArgs e)
        {

            string devAction = "-";
            string devSession = "-";

            #region CheckboxNames
            bool debug = false;
            if (chkAction.Checked)
            {
                if (txtAction.Text == "")
                {
                    MessageBox.Show("Ako je izabrana developer opcija 'action', polje za unos opcije ne smije biti prazno!");
                    goto DoNothingAction;
                }
                else
                {
                    devAction = txtAction.Text;
                }
            }
            if (chkSession.Checked)
            {
                if (txtSession.Text == "")
                {
                    MessageBox.Show("Ako je izabrana developer opcija 'session', polje za unos opcije ne smije biti prazno!");
                    goto DoNothingSession;
                }
                else
                {
                    devSession = txtSession.Text;
                }
            }

            if (chkDebug.Checked)
            {
                debug = true;
            }
            #endregion

            // nm: inace, string moze biti i null pa se to provjerava ovako: if (!string.IsNullOrEmpty(txtName.Text)) - ali u TextBox kontroli nikad nece biti null pa je ovo tvoje ok
            if (txtName.Text != "" && cboApps.Text != "" && txtHttp.Text != "" && txtUsername.Text != "" && txtPassword.Text != "")
            {
                var section = SvcSettings.GetNameValueCollectionSection("appSettings", Process.GetCurrentProcess().MainModule.FileName + ".config");
                //foreach (string key in appSettingsSection.AllKeys)

                //var section = ConfigurationManager.GetSection("appSettings") as NameValueCollection;
                var value = section[txtName.Text + "(" + cboApps.Text.Substring(0, 3) + ")"];
                string[] words = { "|", "|" }; // bezveze string
                if (value != null)
                {
                    words = value.Split('|');
                }

                //usporedjuje ime iz app configa key-a i ime uneseno u txtName (ignore case)
                if (StringComparer.CurrentCultureIgnoreCase.Equals(words[0], txtName.Text) == true
                    && StringComparer.CurrentCultureIgnoreCase.Equals(words[1], cboApps.Text) == true) // case insensitive comparing
                {
                    MessageBox.Show("Unos s istim imenom već postoji!\n\nUnesite novo ime.", "Upozorenje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    this.ActiveControl = txtName; //prebacuje focus na txtName
                }
                else
                {
                    AppName.appNameCombo = txtName.Text + "(" + cboApps.Text.Substring(0, 3) + ")";
                    SaveList.addDataToAppconfig(txtName.Text + "|"
                                               + cboApps.Text + "|"
                                               + txtHttp.Text + txtUrl.Text + "|"
                                               + txtPort.Text + "|"
                                               + txtUsername.Text + "|"
                                               + txtPassword.Text + "|"
                                               + debug.ToString() + "|"
                                               + devAction + "|"
                                               + devSession);
                    BindingList<SvcSettings> list = SvcSettings.GetSettingsFromConfig();
                    this.grdLaunch.DataSource = list;
                }
            }
            else
            {
                MessageBox.Show("Svi obavezni podaci (ime, endpoint(URL), username, password) moraju biti uneseni!", "Greška", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            grdLaunch.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
        DoNothingAction: ;
        DoNothingSession: ;

        }

        public class AppName // pozivanje txt controli u druge clase npr. fmLauncher.AppName.appNameCombo
        // pa ovdje dodati po potrebi variable
        {
            public static string appNameCombo = string.Empty;

        }
        private void btnDeleteListEntry_Click(object sender, EventArgs e)
        {
            string deleteEntry = "";
            if (grdLaunch.RowCount > 0)
            {
                deleteEntry = txtName.Text + "(" + cboApps.Text.Substring(0, 3) + ")";
                var delEntryFromConfig = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
                delEntryFromConfig.AppSettings.Settings.Remove(deleteEntry);
                delEntryFromConfig.Save(ConfigurationSaveMode.Modified);
                //ConfigurationManager.RefreshSection("appSettings"); // nakon brisanja refresh appSettings sekciju pa se i gridview refresha
                grdLaunch.Refresh();
                BindingList<SvcSettings> list = SvcSettings.GetSettingsFromConfig();
                this.grdLaunch.DataSource = list;
            }
        }

        private void txtPort_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar)// samo brojevi u PORT polje
                && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
                MessageBox.Show("Dopušteni su samo brojevi!");
            }
        }

        //public bool IsAddressValid(string addrString) // nm: dobra fora :))
        //{
        //    IPAddress address;
        //    return IPAddress.TryParse(addrString, out address); // provjerava ispravnost upisane IP adrese
        //}

        //private void txtUrl_Leave(object sender, EventArgs e)
        //{
        //    if (IsAddressValid(txtUrl.Text) == false)
        //    {
        //        MessageBox.Show("Provjerite ispravnost IP adrese!", "Obavijest!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //    }
        //}

        private void btnExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void grdLaunch_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            txtName.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[0].Value.ToString();
            cboApps.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[1].Value.ToString();
            System.Uri uri = new Uri(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[2].Value.ToString());
            string uriWithoutScheme = uri.Host + uri.PathAndQuery;
            uriWithoutScheme = uriWithoutScheme.TrimEnd('/');
            txtUrl.Text = uriWithoutScheme;
            txtPort.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString();
            txtUsername.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[4].Value.ToString();
            txtPassword.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[5].Value.ToString();
            Boolean i = bool.Parse(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[6].Value.ToString());
            if (i == true)
            {
                chkDebug.Checked = true;
            }
            else
            {
                chkDebug.Checked = false;
            }

            string semiColon = "";
            string opcAktion = "";
            string opcSession = "";
            string opcDebug = "";
            if (i == true)
            {
                opcDebug = " -debug true ";
            }
            if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString() != "")
            {
                semiColon = ":";
            }
            if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString() != "-")
            {
                opcAktion = " -action " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString();
            }
            if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[8].Value.ToString() != "-")
            {
                opcSession = " -session " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[8].Value.ToString();
            }
            string urlFull = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[2].Value.ToString() + semiColon + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString();
            if (e.ColumnIndex == grdLaunch.ColumnCount - 1) // pokrece se s2d_v2.exe sa parametrima
            {
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = cboApps.Text + ".exe";
                startInfo.Arguments = " -endpoint " + urlFull
                                    + " -user " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[4].Value.ToString()
                                    + " -pass " + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[5].Value.ToString()
                                    + opcDebug + opcAktion + opcSession;
                try
                {

                    Process.Start(startInfo);
                    //MessageBox.Show(startInfo.FileName.ToString() + startInfo.Arguments.ToString());
                    if (chkCloseOption.Checked)
                    {
                        Application.Exit();
                    }

                }
                catch (Exception)
                {
                    MessageBox.Show("Greška pri pokretanju aplikacije:"
                                    + "\n\n Command line:"
                                    + "\n"
                                    + startInfo.FileName
                                    + startInfo.Arguments, "Greška", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

            }
        }

        private void txtName_KeyDown(object sender, KeyEventArgs e)
        {
            Keys key = e.KeyCode;
            if (key == Keys.Space)
            {
                e.Handled = true;
            }

            base.OnKeyDown(e);

        }

        private void txtName_Leave(object sender, EventArgs e)
        {
            if (txtName.Text.Contains(" "))
            {
                MessageBox.Show("Ime ne smije sadržavati prazna mjesta (koristite underscore '_').");
                this.ActiveControl = txtName;
                String sel = txtName.SelectedText;
                //txtName.Focus();
            }
        }

        private void chkAction_CheckedChanged(object sender, EventArgs e)
        {
            if (chkAction.Checked == true)
            {
                txtAction.ReadOnly = false;
            }
            else
            {
                txtAction.ReadOnly = true;
            }
        }

        private void chkSession_CheckedChanged(object sender, EventArgs e)
        {
            if (chkSession.Checked == true)
            {
                txtSession.ReadOnly = false;
            }
            else
            {
                txtSession.ReadOnly = true;
            }
        }

        private void btnCsvExport_Click(object sender, EventArgs e)
        {
            // Displays a SaveFileDialog so the user can save the list
            // assigned to button.

            dlgFileSave.Filter = "CSV format|*.csv";
            dlgFileSave.Title = "Export to CSV";
            dlgFileSave.FileName = "S2D Export";
            dlgFileSave.DefaultExt = "csv";
            dlgFileSave.InitialDirectory = AppDomain.CurrentDomain.BaseDirectory;
            dlgFileSave.RestoreDirectory = true;
            dlgFileSave.ShowDialog();

            if (dlgFileSave.FileName != "")
            {
                WriteCsv.writeCSV(grdLaunch, dlgFileSave.FileName);
            }

        }

        private void txtName_TextChanged(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in grdLaunch.Rows) // SearchAsYouType tekstom iz txtName
            {
                // Test if the first column of the current row equals
                // the value in the text box
                if (StringComparer.CurrentCultureIgnoreCase.Equals((string)row.Cells[0].Value, txtName.Text) == true)
                {
                    // we have a match
                    row.Selected = true;
                }
                else
                {
                    row.Selected = false;
                }
            }
        }

        private void grdLaunch_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            //kupi vrijednosti iz datagridview-a i stavlja ih u potrebne controle


            txtName.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[0].Value.ToString();
            cboApps.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[1].Value.ToString();
            System.Uri uri = new Uri(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[2].Value.ToString());
            string uriWithoutScheme = uri.Host + uri.PathAndQuery;
            uriWithoutScheme = uriWithoutScheme.TrimEnd('/');
            txtUrl.Text = uriWithoutScheme;
            txtPort.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString();
            txtUsername.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[4].Value.ToString();
            txtPassword.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[5].Value.ToString();
            Boolean i = bool.Parse(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[6].Value.ToString());
            if (i == true)
            {
                chkDebug.Checked = true;
            }
            else
            {
                chkDebug.Checked = false;
            }
            if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString() != "-")
            {
                chkAction.Checked = true;
                txtAction.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString();
            }
            else
            {
                chkAction.Checked = false;
                txtAction.Text = null;
            }
            if (grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[8].Value.ToString() != "-")
            {
                chkSession.Checked = true;
                txtSession.Text = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[8].Value.ToString();
            }
            else
            {
                chkSession.Checked = false;
                txtSession.Text = null;
            }

        }

        public static void UpdateAppSettings(string KeyName, string KeyValue)
        {
            XmlDocument XmlDoc = new XmlDocument();

            XmlDoc.Load(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);

            foreach (XmlElement xElement in XmlDoc.DocumentElement)
            {
                if (xElement.Name == "chkbxSettings")
                {

                    foreach (XmlNode xNode in xElement.ChildNodes)
                    {
                        if (xNode.Attributes[0].Value == KeyName)
                        {
                            xNode.Attributes[1].Value = KeyValue;
                        }
                    }
                }
            }
            XmlDoc.Save(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);
        }

        private void chkCloseOption_CheckedChanged(object sender, EventArgs e)
        {
            string checkBoxState = "false";
            if (chkCloseOption.Checked == true)
            {
                checkBoxState = "true";
            }
            UpdateAppSettings("optCloseOnOpen", checkBoxState);
            //chkbxSettings
            //System.Configuration.ConfigurationManager.AppSettings.Set("optCloseOnOpen", chkCloseOption.CheckState.ToString());

        }

        private void btnMinimize_Click(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Normal)
            {
                this.WindowState = FormWindowState.Minimized;
            }
            else
            {
                this.WindowState = FormWindowState.Normal;
            }
        }

        private void grdLaunch_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            startCellValue = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[grdLaunch.CurrentCell.ColumnIndex].Value.ToString();
            startCellValueName = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[0].Value.ToString();
        }
        private void grdLaunch_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            //MessageBox.Show(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[grdLaunch.CurrentCell.ColumnIndex].Value.ToString());
            try
            {
                if (String.IsNullOrWhiteSpace(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[grdLaunch.CurrentCell.ColumnIndex].ToString()) || grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[grdLaunch.CurrentCell.ColumnIndex].Value == null)
                {
                    grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[grdLaunch.CurrentCell.ColumnIndex].Value = startCellValue;
                }
                Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
                //config.AppSettings.Settings.Remove("test3(S2d)"); // ne brise spomenuti key
                //config.AppSettings.Settings[txtName.Text + "(" + cboApps.Text.Substring(0, 3) + ")"].Value = "";

                AppName.appNameCombo = grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[0].Value.ToString() + "(" + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[1].Value.ToString().Substring(0, 3) + ")";
                config.AppSettings.Settings.Remove(startCellValueName + "(" + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[1].Value.ToString().Substring(0, 3) + ")");
                config.Save(ConfigurationSaveMode.Modified);
                SaveList.addDataToAppconfig(grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[0].Value.ToString() + "|"
                                           + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[1].Value.ToString() + "|"
                                           + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[2].Value.ToString() + "|"
                                           + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[3].Value.ToString() + "|"
                                           + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[4].Value.ToString() + "|"
                                           + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[5].Value.ToString() + "|"
                                           + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[6].Value.ToString() + "|"
                                           + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[7].Value.ToString() + "|"
                                           + grdLaunch.Rows[grdLaunch.CurrentCell.RowIndex].Cells[8].Value.ToString());
                BindingList<SvcSettings> list = SvcSettings.GetSettingsFromConfig();
                this.grdLaunch.DataSource = list;

            }
            catch (Exception)
            {

            }

        }

    }
}

